const { analyzeChartAndBuildImage, addTracking } = require('../services/telegramService');

async function handleCommand(command, chatId, bot) {
    const [coin, timeframe] = command.split('/');

    if (!coin || !timeframe) {
        throw new Error('Invalid command format. Use: coinUSDT/timeframe');
    }

    // Th√™m v√†o danh s√°ch theo d√µi
    addTracking(coin, timeframe, chatId);

    try {
        const { prediction, imageBuffer, summary } = await analyzeChartAndBuildImage(coin, timeframe);

        await bot.sendPhoto(chatId, imageBuffer, {
            caption: `*Ph√¢n t√≠ch ${coin} ${timeframe}*\n${summary}\n\n*D·ª± ƒëo√°n:* ${prediction}\n\nƒê√£ th√™m v√†o danh s√°ch theo d√µi. Bot s·∫Ω th√¥ng b√°o khi c√≥ t√≠n hi·ªáu t·ªët!`,
            parse_mode: 'Markdown'
        });

        // G·ª≠i khuy·∫øn ngh·ªã follow
        await bot.sendMessage(
            chatId,
            `üëÄ ƒê√£ b·∫Øt ƒë·∫ßu theo d√µi *${coin}* khung *${timeframe}* cho b·∫°n!\nBot s·∫Ω t·ª± ƒë·ªông g·ª≠i t√≠n hi·ªáu LONG/SHORT k√®m khuy·∫øn ngh·ªã SL/TP t·ªëi ∆∞u khi c√≥ c∆° h·ªôi t·ªët.`,
            { parse_mode: 'Markdown' }
        );
    } catch (error) {
        console.error('L·ªói ph√¢n t√≠ch ho·∫∑c g·ª≠i k·∫øt qu·∫£:', error);
        await bot.sendMessage(
            chatId,
            '‚ùó ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu ho·∫∑c g·ª≠i k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i sau.',
            { parse_mode: 'Markdown' }
        );
    }
}

module.exports = {
    handleCommand
};
const { analyzeChartAndBuildImage, addTracking, removeTracking, getTrackingList } = require('../services/telegramService');

async function handleCommand(command, chatId, bot) {
    const cmd = command.trim().toLowerCase();

    // Hi·ªÉn th·ªã danh s√°ch coin ƒëang theo d√µi
    if (cmd === 'list' || cmd === '/list') {
        const list = getTrackingList(chatId);
        if (list.length === 0) {
            await bot.sendMessage(chatId, 'B·∫°n ch∆∞a theo d√µi coin n√†o.');
        } else {
            const msg = list.map(item => `- ${item.coin} / ${item.timeframe}`).join('\n');
            await bot.sendMessage(chatId, `Danh s√°ch coin b·∫°n ƒëang theo d√µi:\n${msg}`);
        }
        return;
    }

    // Chu·∫©n h√≥a l·ªánh untrack
    if (cmd.startsWith('untrack ') || cmd.startsWith('/untrack ')) {
        const [coin, timeframe] = command.replace(/\/?untrack\s+/i, '').split('/');
        removeTracking(coin, timeframe, chatId);
        await bot.sendMessage(
            chatId,
            `‚ùå B·∫°n ƒë√£ b·ªè theo d√µi *${coin}* khung *${timeframe}*.\n\nƒê·ªÉ theo d√µi l·∫°i, h√£y g·ª≠i: ${coin}/${timeframe}`,
            { parse_mode: 'Markdown' }
        );
        return;
    }

    // Ch·ªâ ki·ªÉm tra c√∫ ph√°p v·ªõi l·ªánh d·∫°ng coin/timeframe
    const [coin, timeframe] = command.split('/');

    if (!coin || !timeframe) {
        throw new Error('Invalid command format. Use: coinUSDT/timeframe');
    }

    // Th√™m v√†o danh s√°ch theo d√µi
    addTracking(coin, timeframe, chatId);

    try {
        const { prediction, imageBuffer, summary } = await analyzeChartAndBuildImage(coin, timeframe);

        await bot.sendPhoto(chatId, imageBuffer, {
            caption: `*Ph√¢n t√≠ch ${coin} ${timeframe}*\n${summary}\n\n*D·ª± ƒëo√°n:* ${prediction}\n\nƒê√£ th√™m v√†o danh s√°ch theo d√µi. Bot s·∫Ω th√¥ng b√°o khi c√≥ t√≠n hi·ªáu t·ªët!`,
            parse_mode: 'Markdown'
        });

        // G·ª≠i khuy·∫øn ngh·ªã follow
        await bot.sendMessage(
            chatId,
            `üëÄ ƒê√£ b·∫Øt ƒë·∫ßu theo d√µi *${coin}* khung *${timeframe}* cho b·∫°n!\nBot s·∫Ω t·ª± ƒë·ªông g·ª≠i t√≠n hi·ªáu LONG/SHORT k√®m khuy·∫øn ngh·ªã SL/TP t·ªëi ∆∞u khi c√≥ c∆° h·ªôi t·ªët.\n\n‚ÑπÔ∏è ƒê·ªÉ b·ªè theo d√µi, g·ª≠i: /untrack ${coin}/${timeframe}`,
            { parse_mode: 'Markdown' }
        );

        // G·ª≠i danh s√°ch coin ƒëang theo d√µi
        const list = getTrackingList(chatId);
        if (list.length > 0) {
            const msg = list.map(item => `- ${item.coin} / ${item.timeframe}`).join('\n');
            await bot.sendMessage(chatId, `Danh s√°ch coin b·∫°n ƒëang theo d√µi:\n${msg}`);
        }
    } catch (error) {
        console.error('L·ªói ph√¢n t√≠ch ho·∫∑c g·ª≠i k·∫øt qu·∫£:', error);
        await bot.sendMessage(
            chatId,
            '‚ùó ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu ho·∫∑c g·ª≠i k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i sau.',
            { parse_mode: 'Markdown' }
        );
    }
}

module.exports = {
    handleCommand,
    addTracking
};
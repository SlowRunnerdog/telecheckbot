const TelegramBot = require('node-telegram-bot-api');
const { handleCommand } = require('./commands/index');
const config = require('./config/index');
const ccxt = require('ccxt');
const { checkTracking } = require('./services/telegramService');

// Ki·ªÉm tra token tr∆∞·ªõc khi kh·ªüi t·∫°o bot
if (!config.TELEGRAM_API_TOKEN) {
    console.error('L·ªói: TELEGRAM_API_TOKEN kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra file .env.');
    process.exit(1);
}

const bot = new TelegramBot(config.TELEGRAM_API_TOKEN, { polling: true });

bot.on('polling_error', (error) => {
    console.error(`Polling error: ${error.code || error.message || error}`);
});

bot.on('webhook_error', (error) => {
    console.error(`Webhook error: ${error.code || error.message || error}`);
});

// Nh·∫≠n l·ªánh b·∫Øt bu·ªôc ph·∫£i c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát / ho·∫∑c ! ·ªü ƒë·∫ßu (v√≠ d·ª•: /BTCUSDT 1h ho·∫∑c !BTCUSDT 1h)
bot.onText(/^[\/!]{1}([A-Z0-9]+USDT)\s+([0-9]+[mhdw])$/i, async (msg, match) => {
    const chatId = msg.chat.id;
    // N·∫øu kh√¥ng match, tr·∫£ v·ªÅ h∆∞·ªõng d·∫´n nh·∫≠p ƒë√∫ng
    if (!match) {
        bot.sendMessage(
            chatId,
            '‚ùó Sai c√∫ ph√°p. L·ªánh ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / ho·∫∑c !\nVui l√≤ng nh·∫≠p theo m·∫´u: `/COINUSDT khung_th·ªùi_gian`\nV√≠ d·ª•: `/BTCUSDT 1h` ho·∫∑c `!BTCUSDT 1h`',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    const symbol = match[1].toUpperCase();
    const timeframe = match[2];

    // Ki·ªÉm tra d·ªØ li·ªáu c√≥ t·ªìn t·∫°i tr√™n Binance kh√¥ng
    const binance = new ccxt.binance();
    try {
        await binance.fetchOHLCV(symbol, timeframe, undefined, 1);
        console.log(`[CHECK] L·∫•y d·ªØ li·ªáu th√†nh c√¥ng cho ${symbol} v·ªõi khung ${timeframe}`);
    } catch (err) {
        console.error(`[CHECK] Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance cho ${symbol} v·ªõi khung ${timeframe}:`, err.message);
        bot.sendMessage(
            chatId,
            `‚ùó Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Binance cho c·∫∑p *${symbol}* v·ªõi khung *${timeframe}*.\nVui l√≤ng ki·ªÉm tra l·∫°i t√™n coin ho·∫∑c khung th·ªùi gian.`,
            { parse_mode: 'Markdown' }
        );
        return;
    }

    try {
        await handleCommand(`${symbol}/${timeframe}`, chatId, bot);
    } catch (error) {
        console.error('Command error:', error);
        if (
            error &&
            error.message &&
            error.message.includes('Invalid command format')
        ) {
            bot.sendMessage(
                chatId,
                '‚ùó Sai c√∫ ph√°p. L·ªánh ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / ho·∫∑c !\nVui l√≤ng nh·∫≠p theo m·∫´u: `/COINUSDT khung_th·ªùi_gian`\nV√≠ d·ª•: `/BTCUSDT 1h` ho·∫∑c `!BTCUSDT 1h`',
                { parse_mode: 'Markdown' }
            );
        } else {
            bot.sendMessage(chatId, 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }
});

bot.on('message', (msg) => {
    const text = msg.text || '';
    // N·∫øu kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng / ho·∫∑c ! th√¨ tr·∫£ v·ªÅ h∆∞·ªõng d·∫´n
    if (!/^[\/!]/.test(text.trim())) {
        bot.sendMessage(
            msg.chat.id,
            '‚ùó L·ªãt mo·∫π sai c·∫•u tr√∫c r·ªìi b·ªë th√™m / ho·∫∑c !\n ƒê·ªÅ ngh·ªã b√°c th·ª±c hi·ªán ƒë√∫ng theo m·∫´u: `/COINUSDT khung_th·ªùi_gian`\nV√≠ d·ª•: `/BTCUSDT 1h` ho·∫∑c `!BTCUSDT 1h`',
            { parse_mode: 'Markdown' }
        );
    }
});

// Th√¥ng b√°o khi bot start th√†nh c√¥ng
bot.getMe()
    .then((me) => {
        console.log(`ü§ñ Bot "${me.username}" ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng nh·∫≠n l·ªánh!`);
    })
    .catch((err) => {
        console.error('L·ªói khi l·∫•y th√¥ng tin bot:', err);
    });

setInterval(() => {
    checkTracking(bot);
}, 5 * 60 * 1000); // 5 ph√∫t